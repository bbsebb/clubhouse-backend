package fr.hoenheimsports.gamedomain.builder;

import fr.hoenheimsports.gamedomain.model.*;
import fr.hoenheimsports.gamedomain.spi.stub.GameRepositoryInMemory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class RefereeBuilderTest {
    private RefereeBuilder refereeBuilder;
    private UUID expectedId;
    private String expectedName;
    private GameRepositoryInMemory gameRepositoryInMemory;
    private UUID expectedIdInMemory;
    private String expectedNameInMemory;

    @BeforeEach
    public void setup() {
        refereeBuilder = new RefereeBuilder();
        expectedId = UUID.randomUUID();
        expectedName = "John Doe";

        expectedIdInMemory = UUID.randomUUID();
        expectedNameInMemory = "Name 1";

        gameRepositoryInMemory = new GameRepositoryInMemory();
        gameRepositoryInMemory.save(
                GameBuilder.builder()
                        .withCompetition(Competition.UNKNOWN)
                        .withCode("code test")
                        .withDay(Day.SINGLE_DAY_GAME)
                        .withFDME(FDME.UNKNOWN)
                        .withHalle(Halle.UNKNOWN)
                        .withHomeTeam(homeTeamBuilder -> homeTeamBuilder
                                .withClub(Club.UNKNOWN)
                                .withGender(Gender.UNKNOWN)
                                .withTeamsColor(TeamsColor.UNKNOWN)
                                .withCategory(Category.UNKNOWN)
                                .withNumber(5)
                                .withCoach(Coach.UNKNOWN))
                        .withVisitingTeam(visitingTeamBuilder -> visitingTeamBuilder
                                .withClub(Club.UNKNOWN)
                                .withGender(Gender.UNKNOWN)
                                .withTeamsColor(TeamsColor.UNKNOWN)
                                .withCategory(Category.UNKNOWN)
                                .withNumber(5)
                                .withCoach(Coach.UNKNOWN))
                        .withReferees(refereesBuilder -> refereesBuilder
                                .withOfficiatingReferee2(refereeBuilder -> refereeBuilder
                                        .withId(expectedIdInMemory)
                                        .withName(expectedNameInMemory))
                                .withOfficiatingReferee1(Referee.UNKNOWN)
                                .withDesignatedReferee1(Referee.UNKNOWN)
                                .withDesignatedReferee2(Referee.UNKNOWN))
                        .build());
    }

    @Test
    public void testBuilderMethod() {
        RefereeBuilder refereeBuilder1 = RefereeBuilder.builder();
        assertNotNull(refereeBuilder1);
    }

    @Test
    public void testRefereeBuilder() {
        Referee referee = refereeBuilder
                .withId(expectedId)
                .withName(expectedName)
                .build();

        assertEquals(expectedId, referee.id());
        assertEquals(expectedName, referee.name());
    }

    @Test
    public void testRefereeBuilderWithAutoGeneratedId() {
        Referee referee = refereeBuilder
                .withName(expectedName)
                .build();

        assertNotNull(referee.id());
        assertEquals(expectedName, referee.name());
    }
    @Test
    public void testRefereeBuilderWithWithRetrievedId() {
        Referee referee = refereeBuilder
                .withName(expectedNameInMemory)
                .addIdGeneratorFromRepository(gameRepositoryInMemory)
                .build();

        assertNotNull(referee.id());
        assertEquals(expectedNameInMemory, referee.name());
        assertEquals(expectedIdInMemory, referee.id());
    }

    @Test
    public void testRefereeBuilderWithWithRetrievedIdWithExistingId() {
        Referee referee = refereeBuilder
                .withId(expectedId)
                .withName(expectedNameInMemory)
                .addIdGeneratorFromRepository(gameRepositoryInMemory)
                .build();

        assertNotNull(referee.id());
        assertEquals(expectedNameInMemory, referee.name());
        assertEquals(expectedIdInMemory, referee.id());
        assertNotEquals(expectedId, referee.id());
    }


}