package fr.hoenheimsports.gamedomain.builder;

import fr.hoenheimsports.gamedomain.model.*;
import fr.hoenheimsports.gamedomain.spi.stub.GameRepositoryInMemory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class CoachBuilderTest {
    CoachBuilder coachBuilder;
    UUID expectedId;
    String expectedName;
    PhoneNumber expectedPhoneNumber;
    String expectedPhoneNumberString;
    GameRepositoryInMemory gameRepositoryInMemory;
    UUID expectedIdInMemory1;
    String expectedNameInMemory1;
    PhoneNumber expectedPhoneNumberInMemory1;
    UUID expectedIdInMemory2;
    String expectedNameInMemory2;
    PhoneNumber expectedPhoneNumberInMemory2;

    @BeforeEach
    public void setup() {
        coachBuilder = CoachBuilder.builder();
        expectedId = UUID.randomUUID();
        expectedName = "John Doe";
        expectedPhoneNumber = new PhoneNumber("1234567890");
        expectedPhoneNumberString = "1234567890";

        expectedIdInMemory1 = UUID.randomUUID();
        expectedNameInMemory1 = "Coach 1";
        expectedPhoneNumberInMemory1 = new PhoneNumber("1");

        expectedIdInMemory2 = UUID.randomUUID();
        expectedNameInMemory2 = "Coach 2";
        expectedPhoneNumberInMemory2 = new PhoneNumber("2");


        gameRepositoryInMemory = new GameRepositoryInMemory();
        gameRepositoryInMemory.save(
                GameBuilder.builder()
                        .withCompetition(Competition.UNKNOWN)
                        .withCode("code test")
                        .withDay(Day.SINGLE_DAY_GAME)
                        .withWeek(Week.NOW)
                        .withSeason(Season.SEASON_2022_2023)
                        .withFDME(FDME.UNKNOWN)
                        .withHalle(Halle.UNKNOWN)
                        .withHomeTeam(homeTeamBuilder -> homeTeamBuilder
                                .withClub(Club.UNKNOWN)
                                .withGender(Gender.UNKNOWN)
                                .withTeamsColor(TeamsColor.UNKNOWN)
                                .withCategory(Category.UNKNOWN)
                                .withNumber(5)
                                .withCoach(coachBuilder -> coachBuilder
                                        .withId(expectedIdInMemory1)
                                        .withName(expectedNameInMemory1)
                                        .withPhoneNumber(expectedPhoneNumberInMemory1)))
                        .withVisitingTeam(visitingTeamBuilder -> visitingTeamBuilder
                                .withClub(Club.UNKNOWN)
                                .withGender(Gender.UNKNOWN)
                                .withTeamsColor(TeamsColor.UNKNOWN)
                                .withCategory(Category.UNKNOWN)
                                .withNumber(5)
                                .withCoach(coachBuilder -> coachBuilder
                                        .withId(expectedIdInMemory2)
                                        .withName(expectedNameInMemory2)
                                        .withPhoneNumber(expectedPhoneNumberInMemory2)))
                        .withReferees(Referees.UNKNOWN)
                        .build()

        );
    }

    @Test
    public void testBuilderMethod() {
        CoachBuilder coachBuilder = CoachBuilder.builder();
        assertNotNull(coachBuilder);
    }


    @Test
    public void testCoachBuilder() {
        Coach coach = coachBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withPhoneNumber(phoneNumberBuilder -> phoneNumberBuilder.withPhoneNumber(expectedPhoneNumberString))
                .build();

        assertEquals(expectedId, coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumberString, coach.phoneNumber().phoneNumber());

    }

    @Test
    public void testCoachBuilderWithAutoGeneratedId() {
        Coach coach = coachBuilder
                .withName(expectedName)
                .withPhoneNumber(phoneNumberBuilder -> phoneNumberBuilder.withPhoneNumber(expectedPhoneNumberString))
                .build();

        assertNotNull(coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumberString, coach.phoneNumber().phoneNumber());
    }
    @Test
    public void testCoachBuilderWithRetrievedId() {
        Coach coach = coachBuilder
                .withName(expectedNameInMemory1)
                .withPhoneNumber(phoneNumberBuilder -> phoneNumberBuilder.withPhoneNumber(expectedPhoneNumberString))
                .addIdGeneratorFromRepository(gameRepositoryInMemory)
                .build();


        assertEquals(expectedNameInMemory1, coach.name());
        assertEquals(expectedIdInMemory1, coach.id());
        assertEquals(expectedPhoneNumberString, coach.phoneNumber().phoneNumber());
    }

    @Test
    public void testCoachBuilderWithRetrievedIdWithExistingId() {
        Coach coach = coachBuilder
                .withId(UUID.randomUUID())
                .withName(expectedNameInMemory1)
                .withPhoneNumber(phoneNumberBuilder -> phoneNumberBuilder.withPhoneNumber(expectedPhoneNumberString))
                .addIdGeneratorFromRepository(gameRepositoryInMemory)
                .build();


        assertEquals(expectedNameInMemory1, coach.name());
        assertEquals(expectedIdInMemory1, coach.id());
        assertEquals(expectedPhoneNumberString, coach.phoneNumber().phoneNumber());
    }

    @Test
    public void testCoachBuilderWithPhoneNumberObject() {
        Coach coach = coachBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withPhoneNumber(expectedPhoneNumber)
                .build();

        assertEquals(expectedId, coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumber, coach.phoneNumber());
    }

    @Test
    public void testCoachBuilderWithPhoneNumber() {
        Coach coach = coachBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withPhoneNumber(phoneNumberBuilder -> phoneNumberBuilder.withPhoneNumber(expectedPhoneNumberString))
                .build();

        assertEquals(expectedId, coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumberString, coach.phoneNumber().phoneNumber());
    }
}