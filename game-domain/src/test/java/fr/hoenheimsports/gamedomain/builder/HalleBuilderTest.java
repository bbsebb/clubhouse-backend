package fr.hoenheimsports.gamedomain.builder;

import fr.hoenheimsports.gamedomain.model.*;
import fr.hoenheimsports.gamedomain.spi.stub.GameRepositoryInMemory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class HalleBuilderTest {
    private HalleBuilder halleBuilder;
    private UUID expectedId;
    private String expectedName;
    private String expectedStreet;
    private int expectedPostalCode;
    private String expectedCity;
    private GlueAuthorization expectedGlueAuthorization;
    private GameRepositoryInMemory gameRepositoryInMemory;
    private UUID expectedIdInMemory;
    private String expectedNameInMemory;
    private String expectedStreetInMemory;
    private int expectedPostalCodeInMemory;
    private String expectedCityInMemory;
    private GlueAuthorization expectedGlueAuthorizationInMemory;

    @BeforeEach
    public void setup() {
        halleBuilder = new HalleBuilder();
        expectedId = UUID.randomUUID();
        expectedName = "Halle A";
        expectedStreet = "123 Rue Principale";
        expectedPostalCode = 75000;
        expectedCity = "Paris";
        expectedGlueAuthorization = GlueAuthorization.AUTHORIZED;

        expectedIdInMemory = UUID.randomUUID();
        expectedNameInMemory = "Halle 1";
        expectedStreetInMemory = "street 1";
        expectedPostalCodeInMemory = 1;
        expectedCityInMemory = "City 1";
        expectedGlueAuthorizationInMemory = GlueAuthorization.UNAUTHORIZED;

        gameRepositoryInMemory = new GameRepositoryInMemory();
        gameRepositoryInMemory.save(
                GameBuilder.builder()
                        .withCompetition(Competition.UNKNOWN)
                        .withCode("code test")
                        .withDay(Day.SINGLE_DAY_GAME)
                        .withWeek(Week.NOW)
                        .withSeason(Season.SEASON_2022_2023)
                        .withFDME(FDME.UNKNOWN)
                        .withHalle(halleBuilder -> halleBuilder
                                .withId(expectedIdInMemory)
                                .withName(expectedNameInMemory)
                                .withAddress(addressBuilder -> addressBuilder
                                        .withStreet(expectedStreetInMemory)
                                        .withPostalCode(expectedPostalCodeInMemory)
                                        .withCity(expectedCityInMemory))
                                .withGlueAuthorization(expectedGlueAuthorizationInMemory)
                                .addIdGeneratorFromRepository(gameRepositoryInMemory))
                        .withHomeTeam(Team.UNKNOWN)
                        .withVisitingTeam(Team.UNKNOWN)
                        .withReferees(Referees.UNKNOWN)
                        .build()

        );
    }

    @Test
    public void testBuilderMethod() {
        HalleBuilder halleBuilder1 = HalleBuilder.builder();
        assertNotNull(halleBuilder1);
    }

    @Test
    public void testHalleBuilder() {
        Hall halle = halleBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withAddress(addressBuilder -> addressBuilder
                        .withStreet(expectedStreet)
                        .withPostalCode(expectedPostalCode)
                        .withCity(expectedCity))
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertEquals(expectedId, halle.id());
        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedStreet, halle.address().street());
        assertEquals(expectedPostalCode, halle.address().postalCode());
        assertEquals(expectedCity, halle.address().city());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }

    @Test
    public void testHalleBuilderWithAutoGeneratedId() {
        Hall halle = halleBuilder
                .withName(expectedName)
                .withAddress(addressBuilder -> addressBuilder
                        .withStreet(expectedStreet)
                        .withPostalCode(expectedPostalCode)
                        .withCity(expectedCity))
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertNotNull(halle.id());
        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedStreet, halle.address().street());
        assertEquals(expectedPostalCode, halle.address().postalCode());
        assertEquals(expectedCity, halle.address().city());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }
    @Test
    public void testCoachBuilderWithRetrievedId() {
        Hall halle = halleBuilder
                .withName(expectedNameInMemory)
                .withAddress(addressBuilder -> addressBuilder
                        .withStreet(expectedStreetInMemory)
                        .withPostalCode(expectedPostalCodeInMemory)
                        .withCity(expectedCityInMemory))
                .withGlueAuthorization(expectedGlueAuthorization)
                .addIdGeneratorFromRepository(gameRepositoryInMemory)
                .build();

        assertNotNull(halle.id());
        assertEquals(expectedIdInMemory, halle.id());
        assertEquals(expectedNameInMemory, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedStreetInMemory, halle.address().street());
        assertEquals(expectedPostalCodeInMemory, halle.address().postalCode());
        assertEquals(expectedCityInMemory, halle.address().city());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
        assertNotEquals(expectedGlueAuthorizationInMemory, halle.glueAuthorization());
    }
    @Test
    public void testCoachBuilderWithRetrievedIdWithExistingId() {
        Hall halle = halleBuilder
                .withId(expectedId)
                .withName(expectedNameInMemory)
                .withAddress(addressBuilder -> addressBuilder
                        .withStreet(expectedStreetInMemory)
                        .withPostalCode(expectedPostalCodeInMemory)
                        .withCity(expectedCityInMemory))
                .withGlueAuthorization(expectedGlueAuthorization)
                .addIdGeneratorFromRepository(gameRepositoryInMemory)
                .build();

        assertNotNull(halle.id());
        assertEquals(expectedIdInMemory, halle.id());
        assertNotEquals(expectedId, halle.id());
        assertEquals(expectedNameInMemory, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedStreetInMemory, halle.address().street());
        assertEquals(expectedPostalCodeInMemory, halle.address().postalCode());
        assertEquals(expectedCityInMemory, halle.address().city());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
        assertNotEquals(expectedGlueAuthorizationInMemory, halle.glueAuthorization());
    }

    @Test
    public void testHalleBuilderWithAddressObject() {
        Address expectedAddress = new Address(expectedStreet, expectedPostalCode, expectedCity);

        Hall halle = halleBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withAddress(expectedAddress)
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertEquals(expectedId, halle.id());
        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedAddress, halle.address());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }

    @Test
    public void testHalleBuilderWithAddress() {
        Address expectedAddress = new Address(expectedStreet, expectedPostalCode, expectedCity);

        Hall halle = halleBuilder
                .withName(expectedName)
                .withAddress(addressBuilder -> addressBuilder
                        .withCity(expectedCity)
                        .withStreet(expectedStreet)
                        .withPostalCode(expectedPostalCode))
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedAddress, halle.address());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }
}